<?xml version="1.0" encoding="UTF-8"?>
<!-- ======================================================================= -->
<!--                                                                         -->
<!--  SignServer: The OpenSource Automated Signing Server                    -->
<!--                                                                         -->
<!--  This software is free software; you can redistribute it and/or         -->
<!--  modify it under the terms of the GNU Lesser General Public             -->
<!--  License as published by the Free Software Foundation; either           -->
<!--  version 2.1 of the License, or any later version.                      -->
<!--                                                                         -->
<!--  See terms of license at gnu.org.                                       -->
<!--                                                                         -->
<!-- ======================================================================= -->
<!-- Version: $Id: modules.xml 5361 2014-11-03 10:27:54Z netmackan $         -->
<project name="SignServer-modules" default="default" basedir=".">

    <target name="default">
        <fail message="This script is not intented to run on its own"/>
    </target>
   
    <!-- This file is normally not included from the root build.xml so we need 
    to set up some properties otherwise defined there. -->
    <property name="platform.project.dir" location="../../"/>
    <property name="signserver.home" location="../../"/>
    <property name="server.dist.dir" value="${signserver.home}/lib"/>

    <property name="ignore.failing.tests" value="true"/>
    
    <!-- Module conditionals -->
    <condition property="signserverws.conditionenabled">
        <istrue value="${signserverws.enabled}"/>
    </condition>
    <condition property="genericws.conditionenabled">
        <istrue value="${genericws.enabled}"/>
    </condition>
    <condition property="validationws.conditionenabled">
        <istrue value="${validationws.enabled}"/>
    </condition>
    <condition property="adminws.conditionenabled">
        <istrue value="${adminws.enabled}"/>
    </condition>
    <condition property="adminws.enabledconditionenabled">
        <istrue value="${adminws.enabled}"/>
    </condition>
    <condition property="includejaxws">
        <or>
            <istrue value="${genericws.enabled}"/>
        </or>
    </condition>
    <condition property="webdoc.conditionenabled">
        <istrue value="${webdoc.enabled}"/>
    </condition>
    <condition property="healthcheck.conditionenabled">
        <istrue value="${healthcheck.enabled}"/>
    </condition>

    <!-- Enable clients -->
    <condition property="timestampclient.conditionenabled">
        <istrue value="${timestampclient.enabled}"/>
    </condition>
    <condition property="validationclient.conditionenabled">
        <istrue value="${validationclient.enabled}"/>
    </condition>
    <condition property="pdfperformancetest.conditionenabled">
        <istrue value="${pdfperformancetest.enabled}"/>
    </condition>
    <condition property="signingandvalidationapi.conditionenabled">
        <istrue value="${signingandvalidationapi.enabled}"/>
    </condition>
    <condition property="admingui.conditionenabled">
        <istrue value="${admingui.enabled}"/>
    </condition>
    <condition property="clientcli.conditionenabled">
        <istrue value="${clientcli.enabled}"/>
    </condition>


    <!-- =================================================================== -->
    <!-- Find application server                                             -->
    <!-- =================================================================== -->

    <!-- Trying to find APPSRV_HOME. Does not fail if not found. -->
    <target name="-modules-set-appserver-home" depends="-set-from-file,-set-from-env">
<!--        <echo message="var.APPSRV_HOME = ${var.APPSRV_HOME}"/>-->
        <property name="j2ee.server.home" value="${var.APPSRV_HOME}"/>
    </target>
    
    <target name="-set-from-file" unless="var.APPSRV_HOME">
        <!-- Read properties from the main SignServer configuration if available -->
        <property file="${user.home}/signserver_deploy.properties" />
        <property file="../../signserver_deploy.properties" />
        <property file="../../conf/signserver_deploy.properties" />
<!--        <echo message="appserver.home = ${appserver.home}"/>-->
        <!-- JBoss5 -->
        <available file="${appserver.home}/client/jbossall-client.jar" property="var.APPSRV_HOME" value="${appserver.home}" />
        <!-- JBoss7 -->
        <available file="${appserver.home}/bin/standalone.sh" property="var.APPSRV_HOME" value="${appserver.home}" />
        <!-- GlassFish -->
        <available file="${appserver.home}/lib/appserv-rt.jar" property="var.APPSRV_HOME" value="${appserver.home}"/>
    </target>

    <target name="-set-from-env" unless="var.APPSRV_HOME">
        <!-- Get property from environment variable -->
        <property environment="env" />
<!--        <echo message="env.APPSRV_HOME = ${env.APPSRV_HOME}"/>-->
        <!-- JBoss5 -->
        <available file="${env.APPSRV_HOME}/client/jbossall-client.jar" property="var.APPSRV_HOME" value="${env.APPSRV_HOME}" />
        <!-- JBoss7 -->
        <available file="${env.APPSRV_HOME}/bin/standalone.sh" property="var.APPSRV_HOME" value="${env.APPSRV_HOME}" />
        <!-- GlassFish -->
        <available file="${env.APPSRV_HOME}/lib/appserv-rt.jar" property="var.APPSRV_HOME" value="${env.APPSRV_HOME}"/>
    </target>
    
    <!-- Fail if APPSRV_HOME was not set -->
    <target name="-modules-check-appserver-home">
        <fail unless="var.APPSRV_HOME" message="Missing variable APPSRV_HOME. Either set the environment variable APPSRV_HOME or edit conf/signserver_build.propertes and set appserver.home."/>
    </target>

    <!-- =================================================================== -->
    <!-- Clean modules -->
    <!-- =================================================================== -->
    
    <target name="-do-clean-module">
        <echo>Cleaning ${ant.project.name}...</echo>
        <antcall target="clean"/>
    </target>

    <!-- =================================================================== -->
    <!-- Build modules -->
    <!-- =================================================================== -->

    <target name="modules" description="Build all enabled modules">
        <subant target="-do-module" verbose="false">
            <fileset dir="modules" includes="${modules.build.includes}"/>
        </subant>
    </target>
    
    <target name="-do-module-build" if="moduleEnable.condition">
        <echo message="Module: ${ant.project.name} enabled"/>
        <antcall target="dist-module"/>
    </target>
    
    <target name="-do-build-test-module" if="moduleEnable.condition">
        <echo message="Building systemtest module: ${ant.project.name}"/>
        <antcall target="dist-module"/>
    </target>
    
    <target name="-do-test-module">
        <property name="dist-module.available" value="false"/>
        <condition property="moduleEnable.condition">
            <and>
                <istrue value="${dist-module.available}"/>
            </and>
        </condition>
        <antcall target="-do-build-test-module"/>
    </target>

    <target name="-do-module">
        <property file="${user.home}/signserver_deploy.properties"/>
        <property file="${platform.project.dir}/signserver_deploy.properties"/>
        <property file="${platform.project.dir}/conf/signserver_deploy.properties"/>
        <property file="${platform.project.dir}/res/modules-project.properties"/>
        <setmoduleprops/>
        <property name="dist-module.available" value="false"/>
        <property name="moduleEnable" value="false"/>
        <condition property="moduleEnable.condition">
            <and>
                <or>
                    <istrue value="${moduleEnable}"/>
                    <istrue value="${includemodulesinbuild}"/>
                </or>
                <istrue value="${dist-module.available}"/>
            </and>
        </condition>
        <echo/>
        <echo>Module: ${ant.project.name}</echo>
        <antcall target="-do-module-build"/>
    </target>

    <!-- Convert from a colon separated classpath to comma separated list with 
        some jars excluded -->
    <target name="-init-macrodef-convertclasspath">
        <macrodef name="convertclasspath">
            <attribute name="classpath"/>
            <attribute default="converted.classpath" name="id"/>
            <attribute default="" name="excludes"/>
            <attribute default="identity" name="mapperType"/>
            <attribute default="*" name="mapperTo"/>
            <attribute default="${basedir}/../../" name="dir"/>
            <attribute default="," name="pathsep"/>
            <sequential>
                <property name="@{id}.base.dir" location="@{dir}"/>

                <pathconvert property="@{id}.as_includes_pattern" pathsep="@{pathsep}">
                    <path path="@{classpath}"/>
                    <map from="${@{id}.base.dir}\" to=""/>
                    <map from="${@{id}.base.dir}/" to=""/>
                    <map from="${@{id}.base.dir}" to=""/>
                </pathconvert>
                <fileset dir="${@{id}.base.dir}" includes="${@{id}.as_includes_pattern}" id="@{id}.as_fileset" excludes="@{excludes}"/>
                <pathconvert property="@{id}" pathsep="@{pathsep}" refid="@{id}.as_fileset">
                    <map from="${@{id}.base.dir}\" to=""/>
                    <map from="${@{id}.base.dir}/" to=""/>
                    <map from="${@{id}.base.dir}" to=""/>
                    <chainedmapper>
                        <mapper type="@{mapperType}"/>
                        <globmapper from="*" to="@{mapperTo}" />
                    </chainedmapper>
                </pathconvert>
                
                <echo level="debug">
                    basedir             : ${@{id}.base.dir}
                    classpath           : @{classpath}
                    as_includes_pattern : ${@{id}.as_includes_pattern}
                    result              : ${@{id}}
                </echo>
            </sequential>
        </macrodef>
    </target>
    
    <!-- =================================================================== -->
    <!-- Client distributables                                               -->
    <!-- =================================================================== -->

    <!-- 
        Create class-path in JAR and copy jar to client-dist and its 
        dependencies to client-dist/lib.
        We do this manually to not have to rely on the copylibstask.
    -->
    <target name="-do-client-dist" depends="-init-macrodef-convertclasspath">
   
        <available file="${dist.jar}" property="dist.jar.available"/>
        <fail unless="dist.jar.available" message="Error: dist.jar should have been configured by the module: ${ant.project.name}"/>
        
        <!-- Convert classpath to be relative to the lib folders -->
        <convertclasspath classpath="${javac.classpath}" id="libs" excludes="modules/" dir="${platform.project.dir}/lib" pathsep=" "/>
        <convertclasspath classpath="${javac.classpath}" id="mods" excludes="lib/" mapperType="flatten" mapperTo="*" pathsep=" "/>
        <jar file="${dist.jar}" update="true">
            <manifest>
                <attribute name="Class-Path" value="${libs} ${mods}"/>
            </manifest>
        </jar>
        
        <!-- Move to lib -->
        <copy todir="${platform.project.dir}/lib" failonerror="true" file="${dist.jar}"/>
        
        <!-- Convert classpath to be relative to this modules dist folder -->
        <property name="base.dir" location="${distdir}/../../"/>
        <property name="base2.dir" location="${distdir}/../../../"/>
        <pathconvert property="localjar.classpath" pathsep=" ">
            <path path="${javac.classpath}"/>
            <map from="${base.dir}/" to="../../"/>
            <map from="${base2.dir}/" to="../../../"/>
        </pathconvert>
        <jar file="${dist.jar}" update="true">
            <manifest>
                <attribute name="Class-Path" value="${localjar.classpath}"/>
            </manifest>
         </jar>
    </target>
    
    <!-- Copy all jars to lib without updating manifest file or anything. -->
    <target name="-do-module-dist">
        <copy todir="${platform.project.dir}/lib/">
            <fileset dir="./target" includes="*.jar"/>
        </copy>
    </target>

    <!-- =================================================================== -->
    <!-- Clover stuff                                                        -->
    <!--                                                                     -->
    <!-- To run Clover put the clover installation as lib/ext/clover-dir. If -->
    <!-- that folder is not available a dummy clover.jar is instead placed   -->
    <!-- there by the code below.                                            -->
    <!-- =================================================================== -->

    <target name="-init-clover">
        <available file="${platform.project.dir}/lib/ext/clover-dir/lib" property="cloverdir.available"/>
    </target>
    
    <target name="-no-clover" unless="cloverdir.available">
        <!-- Put a dummy clover.jar in clover-dir if Clover is not available. -->
        <mkdir dir="${platform.project.dir}/lib/ext/clover-dir/lib"/>
        <copy file="${platform.project.dir}/lib/ext/no-clover/clover.jar" todir="${platform.project.dir}/lib/ext/clover-dir/lib/"/>
    </target>

	<target name="-check.clover" depends="-init-clover, -no-clover" unless="no.clover">
        <property name="clover.jar" value="${platform.project.dir}/lib/ext/clover-dir/lib/clover.jar"/>
        <property name="clover.out.dir" value="${platform.project.dir}"/>
        <property name="clover.db" location="${clover.out.dir}/.clover/clover.db"/>
        <taskdef resource="cloverlib.xml" classpath="${clover.jar}" onerror="ignore"/>
		<available property="clover.installed" classname="com.cenqua.clover.CloverInstr" classpath="${clover.jar}" />
	</target>
	<target name="with.clover" depends="-check.clover" if="clover.installed">
		<clover-setup initstring="${clover.db}">
			<fileset dir="${platform.project.dir}/modules">
				<exclude name="**/org/apache/**/*.java"/>
				<exclude name="**/com/novosec/**/*.java"/>
                                <exclude name="SignServer-Lib-*/**"/>
			</fileset>
		</clover-setup>			
	</target>
	<target name="clover.xml" depends="-check.clover" if="clover.installed">
	    <clover-report initstring="${clover.db}">
	       <current outfile="${clover.out.dir}/clover_html/clover.xml">
	          <format type="xml"/>
	       </current>
	    </clover-report>
	 </target>
	<target name="clover.html" depends="-check.clover" if="clover.installed">
		<clover-html-report initstring="${clover.db}" outdir="${clover.out.dir}/clover_html" title="SignServer"/>
	 </target>
	<target name="clover.clean" depends="-check.clover" if="clover.installed">
		<clover-clean initstring="${clover.db}"/>
	    <delete dir="${clover.out.dir}/clover_html"/>
	</target>
	<!-- End Clover stuff -->
    
</project>